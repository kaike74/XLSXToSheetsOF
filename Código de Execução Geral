// Configura√ß√µes otimizadas e constantes
const CONFIG = {
  NOTION_TOKEN_1: 'ntn_v87800291735BWlhOaZu8Gejq7GrGUTRcUt8F3RVkya8CT',
  notionUrl: 'https://api.notion.com/v1/pages',
  fileId: "1qOq4CfEo_8u_hVvjfwc6SEVx_I7633ev",
  destinationSheetId: "1PVCZffGKfni52DCYqVt4WMpSD8QdiZJooTE0BHuGrGc",
  
  // IDs dos bancos Notion por tipo
  defaultDatabases: {
    "M√≠dia Avulsa": {
      databaseId: '12a20b549cf5802c870fe5abfe9e79c3',
      pageId1: '13c20b549cf580d9b6f9db45cc07d2c5',
      pageId2: '24220b549cf58012ac92ef310bbb4025'
    },
    "Patroc√≠nio": {
      databaseId: '17a20b549cf58149852fd434e8b61575',
      pageId1: '17a20b549cf5809ba7c1d61e288844dd',
      pageId2: '24720b549cf5800ea3c2f3eeabfb6c69'
    }
  }
};

// Vari√°veis globais otimizadas
let NOTION_DATABASE_ID_1;
let NOTION_PAGE_ID_1;
let NOTION_PAGE_ID_2;
let processedValues; // Cache dos dados processados

// Fun√ß√£o principal otimizada
function importXLSXDataToGoogleSheetsAndExportToNotion() {
  const startTime = new Date().getTime();
  Logger.log("üöÄ Iniciando processo otimizado...");
  
  try {
    // 1. Carregar e processar dados de forma otimizada
    processedValues = loadAndProcessData();
    
    if (!processedValues || processedValues.length < 2) {
      throw new Error("Dados insuficientes ou inv√°lidos");
    }

    // 2. Determinar configura√ß√µes do Notion
    const config = determineNotionConfig(processedValues);
    
    // 3. Executar opera√ß√µes em paralelo quando poss√≠vel
    const operations = [
      () => createKML(processedValues),
      () => updateDestSheetOptimized(),
    ];
    
    // Executar opera√ß√µes b√°sicas
    operations.forEach(operation => {
      try {
        operation();
      } catch (error) {
        Logger.log(`Erro em opera√ß√£o: ${error}`);
      }
    });
    
    // 4. Processar Notion (opera√ß√µes mais pesadas)
    if (config.hasCustomDatabase) {
      // Caso com database customizado (mais simples)
      exportDataToNotion(processedValues, CONFIG.NOTION_TOKEN_1, config.databaseId, CONFIG.notionUrl);
    } else {
      // Caso com database padr√£o (mais opera√ß√µes)
      processDefaultNotionFlow(config);
    }
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    Logger.log(`‚úÖ Processo conclu√≠do em ${executionTime}s`);
    
  } catch (error) {
    Logger.log(`‚ùå Erro no processo principal: ${error}`);
    throw error;
  }
}

// Fun√ß√£o otimizada para carregar dados
function loadAndProcessData() {
  try {
    Logger.log("üì• Carregando dados do Excel...");
    
    // Otimiza√ß√£o: usar cache se dispon√≠vel
    if (processedValues && processedValues.length > 0) {
      Logger.log("üìã Usando dados em cache");
      return processedValues;
    }
    
    // Carregar arquivo de forma otimizada
    const blob = DriveApp.getFileById(CONFIG.fileId).getBlob();
    
    const tempFile = Drive.Files.insert({
      title: `TempImport_${Date.now()}`, // Nome √∫nico para evitar conflitos
      mimeType: MimeType.GOOGLE_SHEETS
    }, blob);
    
    // Processar dados
    const tempSpreadsheet = SpreadsheetApp.openById(tempFile.id);
    const values = tempSpreadsheet.getSheets()[0].getDataRange().getValues();
    
    // Limpar arquivo tempor√°rio imediatamente
    DriveApp.getFileById(tempFile.id).setTrashed(true);
    
    Logger.log(`üìä Dados carregados: ${values.length} linhas`);
    return values;
    
  } catch (error) {
    Logger.log(`Erro ao carregar dados: ${error}`);
    throw error;
  }
}

// Fun√ß√£o otimizada para determinar configura√ß√£o do Notion
function determineNotionConfig(values) {
  const config = {
    hasCustomDatabase: false,
    databaseId: null,
    pageId1: null,
    pageId2: null,
    exportType: null
  };
  
  // Verificar se tem database customizado
  if (values[1][36]) {
    config.hasCustomDatabase = true;
    config.databaseId = getNotionDataBaseId(values[1][36]);
    Logger.log(`üîó Database customizado: ${config.databaseId}`);
    return config;
  }
  
  // Usar configura√ß√£o padr√£o
  config.exportType = values[1][33] || "M√≠dia Avulsa";
  const defaultConfig = CONFIG.defaultDatabases[config.exportType] || CONFIG.defaultDatabases["M√≠dia Avulsa"];
  
  config.databaseId = defaultConfig.databaseId;
  config.pageId1 = defaultConfig.pageId1;
  config.pageId2 = defaultConfig.pageId2;
  
  Logger.log(`üìÇ Usando configura√ß√£o padr√£o: ${config.exportType}`);
  return config;
}

// Fun√ß√£o otimizada para fluxo padr√£o do Notion
function processDefaultNotionFlow(config) {
  try {
    // Atualizar vari√°veis globais
    NOTION_DATABASE_ID_1 = config.databaseId;
    NOTION_PAGE_ID_1 = config.pageId1;
    NOTION_PAGE_ID_2 = config.pageId2;
    
    Logger.log("üîÑ Iniciando fluxo do Notion...");
    
    // 1. Atualizar p√°ginas (pode ser feito em paralelo)
    Logger.log("üìù Atualizando p√°ginas modelo...");
    try {
      updatePageNameAndIconOptimized(NOTION_PAGE_ID_1, processedValues[1], CONFIG.NOTION_TOKEN_1);
      Utilities.sleep(200);
      updatePageNameAndIconOptimized(NOTION_PAGE_ID_2, processedValues[1], CONFIG.NOTION_TOKEN_1);
    } catch (error) {
      Logger.log(`‚ö†Ô∏è Erro ao atualizar p√°ginas: ${error}`);
    }
    
    // 2. Limpar database - AGUARDAR CONCLUS√ÉO COMPLETA
    Logger.log("üóëÔ∏è Limpando database - aguardando conclus√£o...");
    const clearSuccess = clearNotionDatabase(CONFIG.NOTION_TOKEN_1, NOTION_DATABASE_ID_1);
    
    if (!clearSuccess) {
      Logger.log("‚ùå Falha na limpeza do database - continuando mesmo assim...");
    }
    
    // 3. Aguardar extra para garantir que as mudan√ßas se propagaram
    Logger.log("‚è≥ Aguardando propaga√ß√£o das mudan√ßas...");
    Utilities.sleep(3000); // 3 segundos extras
    
    // 4. Exportar novos dados
    Logger.log("üì§ Iniciando exporta√ß√£o de novos dados...");
    exportDataToNotion(processedValues, CONFIG.NOTION_TOKEN_1, NOTION_DATABASE_ID_1, CONFIG.notionUrl);
    
    Logger.log("‚úÖ Fluxo do Notion conclu√≠do");
    
  } catch (error) {
    Logger.log(`‚ùå Erro no fluxo padr√£o do Notion: ${error}`);
    throw error;
  }
}

// Fun√ß√£o otimizada para atualizar planilha
function updateDestSheetOptimized() {
  try {
    Logger.log("üìù Atualizando planilha de destino...");
    
    const destSpreadsheet = SpreadsheetApp.openById(CONFIG.destinationSheetId);
    const destSheet = destSpreadsheet.getSheets()[0];
    
    // Opera√ß√µes otimizadas em lote
    destSheet.clear();
    
    if (processedValues && processedValues.length > 0) {
      // Inserir dados em uma √∫nica opera√ß√£o
      const range = destSheet.getRange(1, 1, processedValues.length, processedValues[0].length);
      range.setValues(processedValues);
      
      // Formata√ß√£o em uma √∫nica opera√ß√£o
      range.setNumberFormat('@');
    }
    
    Logger.log("‚úÖ Planilha atualizada com sucesso");
    
  } catch (error) {
    Logger.log(`Erro ao atualizar planilha: ${error}`);
    throw error;
  }
}

// Fun√ß√£o otimizada para criar mapa (vers√£o simplificada)
function createMap() {
  try {
    Logger.log("üó∫Ô∏è Criando mapa...");
    
    // Carregar dados se n√£o estiverem em cache
    if (!processedValues) {
      processedValues = loadAndProcessData();
    }
    
    updateDestSheetOptimized();
    createKML(processedValues);
    
    Logger.log("‚úÖ Mapa criado com sucesso");
    
  } catch (error) {
    Logger.log(`Erro ao criar mapa: ${error}`);
    throw error;
  }
}

// Fun√ß√£o auxiliar otimizada para update de p√°gina
function updatePageNameAndIconOptimized(pageId, values, token) {
  if (!pageId || !values || !token) {
    Logger.log("‚ö†Ô∏è Par√¢metros inv√°lidos para update de p√°gina");
    return;
  }
  
  try {
    const newName = `${removeEspacosExtras(values[34] || 'Sem nome')} (${dateTimeFunction()})`;
    const clientUrl = values[32];
    const icon = createPageIcon(clientUrl);
    
    const payload = {
      properties: {
        title: [{
          text: { content: newName }
        }]
      }
    };
    
    // Adicionar √≠cone apenas se v√°lido
    if (icon) {
      payload.icon = {
        type: "external",
        external: { url: icon }
      };
    }
    
    const response = UrlFetchApp.fetch(`https://api.notion.com/v1/pages/${pageId}`, {
      method: "PATCH",
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28"
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });
    
    if (response.getResponseCode() === 200) {
      Logger.log(`‚úÖ P√°gina ${pageId} atualizada: ${newName}`);
    } else {
      Logger.log(`‚ö†Ô∏è Erro ao atualizar p√°gina ${pageId}: ${response.getContentText()}`);
    }
    
  } catch (error) {
    Logger.log(`Erro ao atualizar p√°gina ${pageId}: ${error}`);
  }
}

// Fun√ß√£o para limpar cache (√∫til para testes)
function clearProcessCache() {
  processedValues = null;
  clearCache(); // Limpa cache das fun√ß√µes utilit√°rias
  NOTION_CACHE.dbProperties.clear();
  NOTION_CACHE.dbSchemas.clear();
  Logger.log("üßπ Cache limpo");
}

// Fun√ß√£o de diagn√≥stico
function diagnosticInfo() {
  Logger.log("=== DIAGN√ìSTICO DO SISTEMA ===");
  Logger.log(`Dados em cache: ${processedValues ? processedValues.length + ' linhas' : 'Nenhum'}`);
  Logger.log(`Database ID atual: ${NOTION_DATABASE_ID_1 || 'N√£o definido'}`);
  Logger.log(`Page ID 1: ${NOTION_PAGE_ID_1 || 'N√£o definido'}`);
  Logger.log(`Page ID 2: ${NOTION_PAGE_ID_2 || 'N√£o definido'}`);
  Logger.log("===============================");
}
