// Configura√ß√µes TURBO otimizadas
const CONFIG = {
  NOTION_TOKEN_1: 'ntn_v87800291735BWlhOaZu8Gejq7GrGUTRcUt8F3RVkya8CT',
  notionUrl: 'https://api.notion.com/v1/pages',
  fileId: "1qOq4CfEo_8u_hVvjfwc6SEVx_I7633ev",
  destinationSheetId: "1PVCZffGKfni52DCYqVt4WMpSD8QdiZJooTE0BHuGrGc",
  
  // IDs dos bancos Notion por tipo
  defaultDatabases: {
    "M√≠dia Avulsa": {
      databaseId: '12a20b549cf5802c870fe5abfe9e79c3',
      pageId1: '13c20b549cf580d9b6f9db45cc07d2c5',
      pageId2: '24220b549cf58012ac92ef310bbb4025'
    },
    "Patroc√≠nio": {
      databaseId: '17a20b549cf58149852fd434e8b61575',
      pageId1: '17a20b549cf5809ba7c1d61e288844dd',
      pageId2: '24720b549cf5800ea3c2f3eeabfb6c69'
    }
  }
};

// Cache global otimizado
let NOTION_DATABASE_ID_1;
let NOTION_PAGE_ID_1;
let NOTION_PAGE_ID_2;
let processedValues;

// FUN√á√ÉO PRINCIPAL SUPER OTIMIZADA
function importXLSXDataToGoogleSheetsAndExportToNotion() {
  const startTime = Date.now();
  Logger.log("üöÄ INICIANDO PROCESSO TURBO...");
  
  try {
    // 1. Carregar dados de forma ultra-r√°pida
    Logger.log("üì• Carregando dados...");
    processedValues = loadAndProcessDataTurbo();
    
    if (!processedValues || processedValues.length < 2) {
      throw new Error("‚ùå Dados insuficientes");
    }

    Logger.log(`üìä ${processedValues.length - 1} registros carregados`);

    // 2. Determinar configura√ß√£o do Notion
    const config = determineNotionConfigTurbo(processedValues);
    
    // 3. Executar opera√ß√µes base em paralelo
    Logger.log("üîß Executando opera√ß√µes base...");
    const baseOperations = [
      () => updateDestSheetTurbo(),
      () => createKMLTurbo(processedValues)
    ];
    
    // Executar simultaneamente
    baseOperations.forEach(operation => {
      try {
        operation();
      } catch (error) {
        Logger.log(`‚ö†Ô∏è Erro em opera√ß√£o base: ${error}`);
      }
    });
    
    // 4. Processar Notion com m√°xima efici√™ncia
    Logger.log("üî• Iniciando processo Notion TURBO...");
    
    if (config.hasCustomDatabase) {
      // Fluxo simplificado para database customizado
      exportDataToNotion(processedValues, CONFIG.NOTION_TOKEN_1, config.databaseId, CONFIG.notionUrl);
    } else {
      // Fluxo otimizado para database padr√£o
      processDefaultNotionFlowTurbo(config);
    }
    
    const endTime = Date.now();
    const executionTime = ((endTime - startTime) / 1000).toFixed(2);
    const recordsPerSecond = ((processedValues.length - 1) / (executionTime)).toFixed(1);
    
    Logger.log(`üéØ PROCESSO CONCLU√çDO EM ${executionTime}s`);
    Logger.log(`‚ö° Performance: ${recordsPerSecond} registros/segundo`);
    
  } catch (error) {
    Logger.log(`‚ùå ERRO CR√çTICO: ${error}`);
    throw error;
  }
}

// CARREGAMENTO DE DADOS TURBO
function loadAndProcessDataTurbo() {
  try {
    // Usar cache se dispon√≠vel
    if (processedValues && processedValues.length > 0) {
      Logger.log("üí® Usando cache de dados");
      return processedValues;
    }
    
    const startTime = Date.now();
    
    // Opera√ß√£o otimizada de convers√£o
    const blob = DriveApp.getFileById(CONFIG.fileId).getBlob();
    const tempFile = Drive.Files.insert({
      title: `TurboImport_${Date.now()}`,
      mimeType: MimeType.GOOGLE_SHEETS
    }, blob);
    
    // Leitura ultra-r√°pida
    const tempSpreadsheet = SpreadsheetApp.openById(tempFile.id);
    const values = tempSpreadsheet.getSheets()[0].getDataRange().getValues();
    
    // Limpeza imediata
    DriveApp.getFileById(tempFile.id).setTrashed(true);
    
    const loadTime = ((Date.now() - startTime) / 1000).toFixed(2);
    Logger.log(`üíæ ${values.length} linhas carregadas em ${loadTime}s`);
    
    return values;
    
  } catch (error) {
    Logger.log(`‚ùå Erro ao carregar dados: ${error}`);
    throw error;
  }
}

// CONFIGURA√á√ÉO TURBO DO NOTION
function determineNotionConfigTurbo(values) {
  const config = {
    hasCustomDatabase: false,
    databaseId: null,
    pageId1: null,
    pageId2: null,
    exportType: null
  };
  
  // Database customizado tem prioridade
  if (values[1][36]) {
    config.hasCustomDatabase = true;
    config.databaseId = getNotionDataBaseId(values[1][36]);
    Logger.log(`üéØ Database customizado: ${config.databaseId}`);
    return config;
  }
  
  // Configura√ß√£o padr√£o
  config.exportType = values[1][33] || "M√≠dia Avulsa";
  const defaultConfig = CONFIG.defaultDatabases[config.exportType] || CONFIG.defaultDatabases["M√≠dia Avulsa"];
  
  config.databaseId = defaultConfig.databaseId;
  config.pageId1 = defaultConfig.pageId1;
  config.pageId2 = defaultConfig.pageId2;
  
  Logger.log(`üìÇ Configura√ß√£o padr√£o: ${config.exportType}`);
  return config;
}

// FLUXO NOTION TURBO
function processDefaultNotionFlowTurbo(config) {
  try {
    // Configurar vari√°veis globais
    NOTION_DATABASE_ID_1 = config.databaseId;
    NOTION_PAGE_ID_1 = config.pageId1;
    NOTION_PAGE_ID_2 = config.pageId2;
    
    Logger.log("üî• Executando fluxo Notion TURBO...");
    
    // 1. Atualiza√ß√£o r√°pida de p√°ginas (em paralelo)
    Logger.log("üìù Atualizando p√°ginas...");
    const pageUpdatePromises = [
      () => updatePageNameAndIconOptimized(NOTION_PAGE_ID_1, processedValues[1], CONFIG.NOTION_TOKEN_1),
      () => updatePageNameAndIconOptimized(NOTION_PAGE_ID_2, processedValues[1], CONFIG.NOTION_TOKEN_1)
    ];
    
    pageUpdatePromises.forEach(updateFn => {
      try {
        updateFn();
      } catch (error) {
        Logger.log(`‚ö†Ô∏è Erro na atualiza√ß√£o de p√°gina: ${error}`);
      }
    });
    
    // 2. Limpeza TURBO do database
    Logger.log("üóëÔ∏è Iniciando limpeza TURBO...");
    const clearStart = Date.now();
    const clearSuccess = clearNotionDatabase(CONFIG.NOTION_TOKEN_1, NOTION_DATABASE_ID_1);
    const clearTime = ((Date.now() - clearStart) / 1000).toFixed(2);
    
    if (clearSuccess) {
      Logger.log(`‚úÖ Database limpo em ${clearTime}s`);
    } else {
      Logger.log(`‚ö†Ô∏è Limpeza parcial em ${clearTime}s - continuando...`);
    }
    
    // 3. Delay m√≠nimo para propaga√ß√£o
    Logger.log("‚è≥ Aguardando propaga√ß√£o...");
    Utilities.sleep(1000); // Reduzido de 3000 para 1000ms
    
    // 4. Exporta√ß√£o TURBO
    Logger.log("üöÄ Iniciando exporta√ß√£o TURBO...");
    const exportStart = Date.now();
    exportDataToNotion(processedValues, CONFIG.NOTION_TOKEN_1, NOTION_DATABASE_ID_1, CONFIG.notionUrl);
    const exportTime = ((Date.now() - exportStart) / 1000).toFixed(2);
    
    Logger.log(`üéØ Exporta√ß√£o conclu√≠da em ${exportTime}s`);
    
  } catch (error) {
    Logger.log(`‚ùå Erro no fluxo Notion: ${error}`);
    throw error;
  }
}

// ATUALIZA√á√ÉO TURBO DA PLANILHA
function updateDestSheetTurbo() {
  try {
    const startTime = Date.now();
    
    const destSpreadsheet = SpreadsheetApp.openById(CONFIG.destinationSheetId);
    const destSheet = destSpreadsheet.getSheets()[0];
    
    // Opera√ß√£o √∫nica e r√°pida
    destSheet.clear();
    
    if (processedValues && processedValues.length > 0) {
      const range = destSheet.getRange(1, 1, processedValues.length, processedValues[0].length);
      range.setValues(processedValues);
      range.setNumberFormat('@');
    }
    
    const updateTime = ((Date.now() - startTime) / 1000).toFixed(2);
    Logger.log(`üìä Planilha atualizada em ${updateTime}s`);
    
  } catch (error) {
    Logger.log(`‚ùå Erro ao atualizar planilha: ${error}`);
    throw error;
  }
}

// KML TURBO
function createKMLTurbo(data) {
  try {
    const startTime = Date.now();
    
    if (!data || data.length < 2) {
      Logger.log("‚ö†Ô∏è Dados insuficientes para KML");
      return;
    }
    
    createKML(data);
    
    const kmlTime = ((Date.now() - startTime) / 1000).toFixed(2);
    Logger.log(`üó∫Ô∏è KML criado em ${kmlTime}s`);
    
  } catch (error) {
    Logger.log(`‚ùå Erro ao criar KML: ${error}`);
    throw error;
  }
}

// FUN√á√ÉO SIMPLIFICADA PARA CRIAR APENAS MAPA
function createMapTurbo() {
  try {
    Logger.log("üó∫Ô∏è Criando mapa TURBO...");
    
    if (!processedValues) {
      processedValues = loadAndProcessDataTurbo();
    }
    
    updateDestSheetTurbo();
    createKMLTurbo(processedValues);
    
    Logger.log("‚úÖ Mapa criado com sucesso");
    
  } catch (error) {
    Logger.log(`‚ùå Erro ao criar mapa: ${error}`);
    throw error;
  }
}

// FUN√á√ïES DE DIAGN√ìSTICO OTIMIZADAS
function diagnosticInfoTurbo() {
  const cacheSize = processedValues ? processedValues.length : 0;
  const memoryUsage = (cacheSize * 100 / 1024).toFixed(2); // Estimativa em KB
  
  Logger.log("=== DIAGN√ìSTICO TURBO ===");
  Logger.log(`üìä Dados em cache: ${cacheSize} linhas`);
  Logger.log(`üíæ Uso estimado de mem√≥ria: ${memoryUsage} KB`);
  Logger.log(`üîó Database ID: ${NOTION_DATABASE_ID_1 || 'N√£o definido'}`);
  Logger.log(`üìÑ Page ID 1: ${NOTION_PAGE_ID_1 || 'N√£o definido'}`);
  Logger.log(`üìÑ Page ID 2: ${NOTION_PAGE_ID_2 || 'N√£o definido'}`);
  
  // Testar performance
  const startTime = Date.now();
  for (let i = 0; i < 1000; i++) {
    Math.random() * Date.now();
  }
  const perfTime = Date.now() - startTime;
  Logger.log(`‚ö° Performance do ambiente: ${perfTime}ms para 1000 opera√ß√µes`);
  Logger.log("========================");
}

// LIMPEZA DE CACHE TURBO
function clearProcessCacheTurbo() {
  processedValues = null;
  clearCache(); // Limpa cache das fun√ß√µes utilit√°rias
  NOTION_CACHE.dbProperties.clear();
  NOTION_CACHE.dbSchemas.clear();
  
  // Force garbage collection (se dispon√≠vel)
  try {
    if (typeof gc !== 'undefined') {
      gc();
    }
  } catch (e) {
    // GC n√£o dispon√≠vel, ignorar
  }
  
  Logger.log("üßπ Cache TURBO limpo");
}

// FUN√á√ïES DE COMPATIBILIDADE (mantidas para n√£o quebrar c√≥digo existente)
function createMap() {
  return createMapTurbo();
}

function clearProcessCache() {
  return clearProcessCacheTurbo();
}

function diagnosticInfo() {
  return diagnosticInfoTurbo();
}

function updateDestSheetOptimized() {
  return updateDestSheetTurbo();
}

function loadAndProcessData() {
  return loadAndProcessDataTurbo();
}

function determineNotionConfig(values) {
  return determineNotionConfigTurbo(values);
}

function processDefaultNotionFlow(config) {
  return processDefaultNotionFlowTurbo(config);
}

// FUN√á√ÉO PARA TESTE DE PERFORMANCE
function performanceTest() {
  Logger.log("üß™ Iniciando teste de performance...");
  
  const tests = [
    {
      name: "Carregamento de dados",
      fn: () => loadAndProcessDataTurbo()
    },
    {
      name: "Processamento de cache",
      fn: () => {
        if (processedValues) {
          processedValues.forEach((row, index) => {
            if (index < 10) { // Teste apenas primeiras 10 linhas
              createImage(row, 27);
              removeEspacosExtras(row[8] || '');
            }
          });
        }
      }
    },
    {
      name: "Opera√ß√µes de string",
      fn: () => {
        for (let i = 0; i < 100; i++) {
          const test = `Teste ${i} - ${Date.now()}`;
          removeEspacosExtras(test);
          truncateText(test, 50);
        }
      }
    }
  ];
  
  tests.forEach(test => {
    const start = Date.now();
    try {
      test.fn();
      const time = Date.now() - start;
      Logger.log(`‚ö° ${test.name}: ${time}ms`);
    } catch (error) {
      Logger.log(`‚ùå ${test.name}: ERRO - ${error}`);
    }
  });
  
  Logger.log("üß™ Teste de performance conclu√≠do");
}
